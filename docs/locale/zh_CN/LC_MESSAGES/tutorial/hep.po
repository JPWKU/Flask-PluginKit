# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, staugur
# This file is distributed under the same license as the Flask-PluginKit
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flask-PluginKit 3.0.x\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-09-27 17:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../tutorial/hep.rst:4
msgid "Hook Extension Point"
msgstr "钩子扩展点"

#: ../../tutorial/hep.rst:7
msgid "Description"
msgstr "描述"

#: ../../tutorial/hep.rst:9
msgid "The extension point abbreviation is hep."
msgstr "这个扩展点缩写为hep。"

#: ../../tutorial/hep.rst:11
msgid ""
"This extension point works in the flask hook function and currently "
"supports three hooks with the following names:"
msgstr "这个扩展点工作在Flask钩子函数中，当前支持三种钩子："

#: ../../tutorial/hep.rst:14 ../../tutorial/hep.rst:50
msgid "before_request"
msgstr ""

#: ../../tutorial/hep.rst:16
msgid "Before request (intercept requests are allowed)"
msgstr "发生在请求之前（允许拦截请求）"

#: ../../tutorial/hep.rst:18 ../../tutorial/hep.rst:59
msgid "after_request"
msgstr ""

#: ../../tutorial/hep.rst:20
msgid "After request (no exception before return)"
msgstr "发生在请求后（无异常时）"

#: ../../tutorial/hep.rst:22 ../../tutorial/hep.rst:65
msgid "teardown_request"
msgstr ""

#: ../../tutorial/hep.rst:24
msgid "After request (before return, with or without exception)"
msgstr "发生在请求后（即使遇到了异常）"

#: ../../tutorial/hep.rst:26 ../../tutorial/hep.rst:71
msgid "before_first_request"
msgstr ""

#: ../../tutorial/hep.rst:28
msgid ""
"Registers a function to be run before the first request to this instance "
"of the application."
msgstr "注册一个函数，在应用程序实例的第一个请求之前运行。"

#: ../../tutorial/hep.rst:32
msgid ""
"Other hooks will be supported later, and a exception "
":class:`~flask_pluginkit.exceptions.PEPError` will be triggered if a hook"
" name that is not supported by the current version is used."
msgstr ""
"后续会支持其他钩子，如果使用了当前版本不支持的钩子，将会触发异常 "
":class:`~flask_pluginkit.exceptions.PEPError`"

#: ../../tutorial/hep.rst:36
msgid ""
"The plugin needs to return the hep field via register. The hep data type "
"returned is a dictionary with the format {hook_name: callable}, which can"
" have multiple hep_names."
msgstr ""
"插件需要通过register返回hep字段，返回的hep数据类型是一个格式为{hook_name: "
"callable}的字典，它可以有多个hep_name"

#: ../../tutorial/hep.rst:40
msgid ""
"The Flask-PluginKit loads hep via "
":meth:`~flask_pluginkit.PluginManager._hep_handler`, this method will "
"detect hep rules and specific content."
msgstr ""
"Flask-PluginKit通过 :meth:`~flask_pluginkit.PluginManager._hep_handler` "
"加载hep，这个方法会检测hep规则和内容。"

#: ../../tutorial/hep.rst:44
msgid ""
"Similar to tep, each hook_name has many values for the entire web "
"application."
msgstr "与tep类似，在整个Web应用程序中，每个hook_name都有许多值。"

#: ../../tutorial/hep.rst:46
msgid ""
"When in use, the user does not care how to call, because Flask-PluginKit "
"has registered the hook handler at initialization time, but it should be "
"noted that there are different requirements for different hook type "
"handlers:"
msgstr "在使用时，用户不用关心如何调用，因为Flask-PluginKit在初始化时已经注册了钩子处理程序，但应该注意不同的钩子类型处理程序有不同的要求："

#: ../../tutorial/hep.rst:52
msgid ""
"This is simple, any callback function, class method, and so on can be "
"used, there is no parameter, but the hook function here has a special "
"place. As we all know, for Flask, if the before_request return value is "
"not None, the request will be terminated. So Flask-PluginKit will try to "
"detect the return value of the hook function, if it is not None, it will "
"return, and the request is terminated at this moment."
msgstr ""
"这很简单，任何回调函数、类方法等都可以使用，没有参数，但这里的钩子函数有一个特殊的地方。 "
"众所周知，对于Flask，如果before_request返回值不是None，则请求将被终止。 因此Flask-"
"PluginKit将尝试检测钩子函数的返回值，如果它不是None，将返回，此时请求终止。"

#: ../../tutorial/hep.rst:61
msgid ""
"Will pass a **response** parameter, this is the web application response "
"data, is an instance of :class:`~flask.Response`, the function "
"corresponding to this hook can get response, you can not return response."
msgstr ""
"将传递 **response** 参数，这是Web应用程序的响应数据，是 :class:`~flask.Response` "
"的一个实例，对应这个钩子的函数可以得到response，不过不能返回response，当然也可以返回，不过Flask-"
"PluginKit目前不会处理你的返回。"

#: ../../tutorial/hep.rst:67
msgid ""
"Similar to after_request, this hook is triggered by the flask when the "
"web exception occurs. Flask-PluginKit will pass the **exception** "
"parameter to the corresponding hook function without returning."
msgstr ""
"与after_request类似，当Web异常发生时，此钩子由Flask触发。Flask-PluginKit将 **exception** "
"传递给相应的钩子函数。"

#: ../../tutorial/hep.rst:73
msgid "Refer before_request, run only once after the app starts, no return value."
msgstr "参考before_request，仅在应用启动后运行一次，没有返回值。"

#: ../../tutorial/hep.rst:76
msgid "Example"
msgstr "示例"

#: ../../tutorial/hep.rst:78
msgid "Plugin registration for hep"
msgstr "注册hep"

#: ../../tutorial/hep.rst:108
msgid ""
"As above, after your program is running, the `set_login_state` function "
"will be executed before each request, and the `record_access_log` "
"function will be executed before the request returns."
msgstr ""
"如上所述，在程序运行之后，将在每个请求之前执行 `set_login_state` 函数，并且在请求返回之前将执行 "
"`record_access_log` 函数。"

